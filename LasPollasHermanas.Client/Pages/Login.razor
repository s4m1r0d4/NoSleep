@page "/"
@layout LoginLayout

@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject UserClient userClient

@using LasPollasHermanas.Client.Extensions
@using LasPollasHermanas.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using LasPollasHermanas.Client.Data

<AuthorizeView>
@if (context.User?.Identity?.IsAuthenticated ?? false) {
    navigationManager.NavigateTo("/index");
}
</AuthorizeView>

<h1 class="m-3">Login</h1>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" class="col-md-4">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (Message != null) {
        <div class="alert alert-danger" role="alert">
            @Message
        </div>
    }

    <div class="form-group row-md">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Email" />
    </div>

    <div class="form-group row-md">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
    </div>

    <div class="row-md">
        <button type="submit" class="btn btn-primary">Login</button>
    </div>

    <br>

    <div class="row-md">
        <a href="/register">Don't have an account?</a>
    </div>
</EditForm>


@code {
    private LoginDTO loginModel = new();
    public string? Message { get; set; }

    private async Task HandleValidSubmit()
    {
        var model = await userClient.TryLogin(loginModel);
        if (model != null) {
            var authExt = (AuthExtension)authenticationStateProvider;
            await authExt.UpdateAuthStatus(model);
            navigationManager.NavigateTo("/index");
        } else {
            Message = "Invalid login attempt";
            navigationManager.NavigateTo("/");
        }
    }
}
